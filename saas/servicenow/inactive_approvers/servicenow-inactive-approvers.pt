
name "ServiceNow Inactive Approvers"
rs_pt_ver 20180301
type "policy"
short_description "This policy will identify ServiceNow Approvers that have not logged in within a specified number of days. See the [README](https://github.com/rightscale/policy_templates/tree/master/fsm/servicenow/inactive_approvers/) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description "Version: 1.0"
severity "medium"
category "SaaS Management"

###############################################################################
# User inputs
###############################################################################

parameter "param_sn_instance_id" do
  label "ServiceNow Instance Name"
  type "string"
end

parameter "param_exclude_vip_users" do
  label "Exclude VIP Users?"
  type "string"
  allowed_values "true","false"
  default "true"
end

parameter "param_days" do
  label "Number of Days Since Last Login"
  type "number"
  default 30
end

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

###############################################################################
# Authentication
###############################################################################

auth "auth_sn", type: "basic" do
  username cred("SERVICENOW_USERNAME")
  password cred("SERVICENOW_PASSWORD")
end

###############################################################################
# Datasources
###############################################################################

datasource "ds_sn_active_approvers" do
  request do
    run_script $js_sn_approvers_request,$param_sn_instance_id
  end
  result do
    encoding "json"
    collect jmes_path(response,"result[*]") do
      field "sys_updated_on", jmes_path(col_item,"sys_updated_on")
      field "sysapproval", jmes_path(col_item,"sysapproval")
      field "state", jmes_path(col_item,"state")
      field "approval_source", jmes_path(col_item,"approval_source")
      field "group", jmes_path(col_item,"group")
      field "approver", jmes_path(col_item,"approver")
    end
  end
end

datasource "ds_sn_filter_approvers" do
  run_script $js_sn_filter_approvers, $ds_sn_active_approvers, $param_days
end

datasource "ds_sn_inactive_approvers" do
  run_script $js_sn_inactive_approvers, $ds_sn_filter_approvers, $ds_sn_all_approvers
end

###############################################################################
# Scripts
###############################################################################

script "js_sn_approvers_request", type: "javascript" do
  parameters "sn_instance"
  result "request"
  code <<-EOS

    var request_filter = "state=approved"
    var display_value = "true"
    var exclude_ref = "true"
    var fields = "approver,state,sys_updated_on,sysapproval,group,approval_source"

    var request = {
      auth: "auth_sn",
      verb: "GET",
      host: sn_instance + ".service-now.com",
      path: "/api/now/table/sysapproval_approver",
      query_params: {
        "sysparm_query": request_filter
        "sysparm_display_value": display_value
        "sysparm_exclude_reference_link": exclude_ref
        "sysparm_fields": fields
      },
      headers: {
        "User-Agent": "RS Policies",
        "Accept": "application/json"
      }
    }
  EOS
end

script "js_sn_filter_approvers", type: "javascript" do
  parameters "approvers","param_days"
  result "result"
  code <<-EOS

    var result = [];

    var date = new Date(new Date().setDate(new Date().getDate() - param_days)).toISOString();

    _.each(approvers, function(approver){
      if (date > approver["sys_updated_on"]){
        //skipapprover
      } else {
        result.push(approver)
      }
    })

    result = _.sortBy(result, 'sys_updated_on').reverse();
  EOS
end

script "js_sn_inactive_approvers", type: "javascript" do
  parameters "active_approvers","all_approvers"
  result "result"
  code <<-EOS

    var result = [];

    _.each(all_approvers, function(checkapprover){
      var tmpObject = _.findWhere(active_approvers, {approver : checkapprover.name})
      if (typeof tmpObject == "object") {
        //do nothing
      } else {
        result.push(checkapprover)
      }
    })

    result = _.sortBy(result, 'name');
  EOS
end

###############################################################################
# Escalation
###############################################################################

escalation "esc_email" do
  email $param_email
end

# escalation "remove_approver_user_role_approval" do
#   request_approval  do
#     label "Approve Role Removal"
#     description "Approve escalation to run ServiceNow role removal of the approver_user role from the user."
#     parameter "approval_reason" do
#       type "string"
#       label "Reason for Approval"
#       description "Note: Users assigned to the approver_user role require an Approver license which incurs additional costs in ServiceNow."
#     end
#   end
#   run "remove_user_from_approver_user_role", data
# end

# define remove_user_from_approver_user_role($data) return $all_responses do
#   foreach $item in $data do
#     sub on_error: skip do
#       $instance_response = http_request(
#         # Do some stuff
#       )
#     end
#   end
# end

###############################################################################
# Policy
###############################################################################

policy "policy_inactive_approvers" do
  validate $ds_sn_inactive_approvers do
    summary_template "Inactive ServiceNow Approvers with approver_user Role"
    detail_template <<-EOS
# Inactive ServiceNow Approvers

### ServiceNow Instance: {{ parameters.param_sn_instance_id }}
### Minimum Number of Days Since Last Approval: {{ parameters.param_days }}

| Name | Email | ServiceNow ID |
| ---- | ----- | ------------- |
{{ range data -}}
| {{ .name }} | {{.email}} | {{.sys_id}} |
{{ end -}}

EOS
    escalate $esc_email
    check eq(size(data), 0)
  end
end