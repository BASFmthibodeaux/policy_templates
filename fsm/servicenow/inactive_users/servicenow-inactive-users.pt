name "Inactive Users - ServiceNow"
rs_pt_ver 20180301
type "policy"
short_description "This policy will identify ServiceNow users that have not logged in within a specified number of days. See the [README](https://github.com/rightscale/policy_templates/tree/master/fsm/servicenow/inactive_users/) and [docs.rightscale.com/policies](http://docs.rightscale.com/policies/) to learn more."
long_description "Version: 1.0"
severity "medium"
category "SaaS Management"

parameter "param_sn_instance_id" do
  label "ServiceNow Instance Name"
  type "string"
end

parameter "param_days" do
  label "Number of Days Since Last Login"
  type "number"
  default 30
end

parameter "param_exclude_vip_users" do
  label "Exclude VIP Users?"
  type "string"
  allowed_values "true","false"
  default "true"
end 

parameter "param_email" do
  type "list"
  label "Email addresses to notify"
  description "Email addresses of the recipients you wish to notify when new incidents are created"
end

auth "auth_sn", type: "basic" do
  username cred("SERVICENOW_USERNAME")
  password cred("SERVICENOW_PASSWORD")
end

datasource "ds_sn_users" do
  request do
    run_script $js_sn_users_request,$param_sn_instance_id,$param_exclude_vip_users
  end 
  result do
    encoding "json"
    collect jmes_path(response,"result[*]") do
      field "last_login_time", jmes_path(col_item,"last_login_time")
      field "name", jmes_path(col_item,"name")
      field "user_name", jmes_path(col_item,"user_name")
      field "id", jmes_path(col_item,"sys_id")
      field "email", jmes_path(col_item,"email")
    end
  end
end

script "js_sn_users_request", type: "javascript" do
  parameters "sn_instance","exclude_vip"
  result "request"
  code <<-EOS

    if (exclude_vip === "true"){
      var request_filter = "emailISNOTEMPTY^active=true^locked_out=false^vip=false"
    } else {
      var request_filter = "lemailISNOTEMPTY^active=true^locked_out=false"
    }

    var request = {
      auth: "auth_sn",
      verb: "GET",
      host: sn_instance + ".service-now.com",
      path: "/api/now/table/sys_user",
      query_params: {
        "sysparm_query": request_filter
      },
      headers: {
        "User-Agent": "RS Policies",
        "Accept": "application/json"
      }
    } 
  EOS
end

datasource "ds_filter_users" do
  run_script $js_filter_users, $ds_sn_users, $param_days
end

script "js_filter_users", type: "javascript" do
  parameters "users","param_days"
  result "result"
  code <<-EOS

    var result = [];

    var date = new Date(new Date().setDate(new Date().getDate() - param_days)).toISOString();

    _.each(users, function(user){
      if (_.isNull(user["last_login_time"])){
        result.push(user)
      } else if (date > user["last_login_time"]){
        result.push(user)
      } else {
        // skip
      }
    })

    result = _.sortBy(result, 'last_login_time').reverse();
  EOS
end



escalation "esc_email" do
  email $param_email
end

policy "policy_inactive_users" do
  validate $ds_filter_users do
    summary_template "Inactive ServiceNow Users"
    detail_template <<-EOS
# Inactive ServiceNow Users

### ServiceNow Instance: {{ parameters.param_sn_instance_id }}
### Minimum Number of Days Since Last Login: {{ parameters.param_days }}

| Name | Email Address | Last Login | Username | ServiceNow ID |
| ---- | ------------- | ---------- | -------- | ------------- |
{{ range data -}}
| {{ .name }} | {{.email}} | {{.last_login_time}} | {{.user_name}} | {{.id}}
{{ end -}}

EOS
    escalate $esc_email
    check eq(size(data), 0)
  end
end

