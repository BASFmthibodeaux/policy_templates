name "Old Images Policy"
rs_pt_ver 20180301
type "policy"
short_description "A policy that sends email notifications when an image older then a certain timeframe are fouond"
long_description "Version: 1.0"
severity "high"
category "Cost"

permission "perm_images" do
  label "Access images"
  resources "rs_cm.clouds", "rs_cm.images"
  actions "rs_cm.index", "rs_cm.show"
end

permission "perm_retrieve_tags" do
  label "Retrieve Tags"
  actions "rs_cm.by_resource"
  resources "rs_cm.tags"
end

parameter "param_age_days" do
  type "number"
  label "Number of days old image to delete"
  description "Images older than this time, will be included in the report"
end

parameter "param_email" do
  label "Email addresses"
  description "Email addresses of the recipients you wish to notify"
  type "list"
end

parameter "param_images_tag_list" do
  type "list"
  label "Images Tag List (e.g.: image:keep=true)"
  description "List of tags to exclude"
end

auth "rs", type: "rightscale"

resources "clouds", type: "rs_cm.clouds"

resources "images", type: "rs_cm.images" do
  iterate @clouds
  cloud_href href(iter_item)
  filter do
    visibility "private"
  end
  tags none($param_images_tag_list,"policy:delete=error")
end

datasource "ds_images" do
  iterate @images
  field "resource_uid", val(iter_item,  "resource_uid")
  field "name", val(iter_item, "name")
  field "description", val(iter_item, "description")
  field "root_device_storage", val(iter_item,"root_device_storage")
  field "href", href(iter_item)
  field "updated_at", val(iter_item, "updated_at")
end

escalation "report_old_images" do
  request_approval  do
    label "Escalation approval"
    description "Approve delete action"
    parameter "approval_reason" do
      type "string"
      label "Reason for approval"
      description "Explain why you are approving the action"
    end
  end

  #run "delete_old_images", data
  email $param_email
end

resolution "report_old_images_resolution" do
  email $param_email
end

policy "pol_old_images" do
  validate_each $ds_images do
    summary_template "{{ rs_project_name }} (Account ID: {{ rs_project_id }}): {{len data}} Images that can be deleted"
    detail_template <<-EOS
# Images that can be deleted

| Resource UID | Name | Href | Tags | Description | Root Device Storage | Updated At |
| ------------ | ---- | ---- | ---- | ----------- | ------------------- | ---------- |
{{ range data -}}
| {{ .resource_uid }} | {{ .name }} | {{.href}} | {{.tags}} | {{.description}} | {{.root_device_storage}} | {{.updated_at}}
{{ end -}}
EOS

    escalate $report_old_images
    check lt(dec(now,to_d(val(item, "updated_at"))), prod($param_age_days, 24*3600))
    resolve $report_old_images_resolution
  end
end

define delete_old_images($data) do
  foreach $item in $data do
    sub on_error: image_error($item) do
      @image = rs_cm.get(href: $item['href'])
      @image.destroy()
    end
    call sys_log('destroy' ,to_s($item))
  end
end

define image_error($item) do
  sub on_error: skip do
    rs_cm.tags.multi_add(resource_hrefs: [$item['href']], tags: ["policy:delete=error"])
  end
  call sys_log('destroy-failed' ,to_s($item))
  $_error_behavior = "skip"
end

define sys_log($subject, $detail) do
  rs_cm.audit_entries.create(
    notify: "None",
    audit_entry: {
      auditee_href: @@account,
      summary: "Old image: "+$subject,
      detail: $detail
    }
  )
end