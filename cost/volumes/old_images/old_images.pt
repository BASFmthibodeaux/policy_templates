name "Old Images Policy"
rs_pt_ver 20180301
type "policy"
short_description "A policy that sends email notifications when a snapshots older then a certain timeframe are fouond"
long_description "Version 1.0"
severity "high"
category "Cost"

permission "perm_images" do
  label "Access images"
  resources "rs_cm.clouds", "rs_cm.images"
  actions "rs_cm.index", "rs_cm.show"
end

permission "perm_retrieve_tags" do
  label "Retrieve Tags"
  actions "rs_cm.by_resource"
  resources "rs_cm.tags"
end

parameter "param_age_days" do
  type "number"
  label "Number of days old snapshot to delete"
end

parameter "param_escalate_to" do
  type "string"
  label "Email address to send escalation emails to"
end

parameter "param_images_tag_list" do
  type "list"
  label "Images Tag List"
  default ["images:keep=true"]
end

auth "rs", type: "rightscale"

resources "clouds", type: "rs_cm.clouds" do
  filter do
    cloud_type ne: ["soft_layer", "cloud_stack","azure","rackspace_next_gen","vscale","blue_skies","open_stack_v2","uca","open_stack_v3"]
  end
end

resources "images", type: "rs_cm.images" do
  iterate @clouds
  cloud_href href(iter_item)
  filter do
    visibility "private"
  end
end

datasource "ds_images" do
  iterate @images
  field "resource_uid", val(iter_item,  "resource_uid")
  field "name", val(iter_item, "name")
  field "description", val(iter_item, "description")
  field "root_device_storage", val(iter_item,"root_device_storage")
  field "href", href(iter_item)
end

datasource "ds_images_tags" do
  request do
    auth $rs
    verb "POST"
    host rs_cm_host
    path "/api/tags/by_resource"
    header "X-Api-Version", "1.5"
    body_field "resource_hrefs", hrefs(@images)
  end
end

datasource "ds_filtered_images" do
  run_script $js_filter_ds_images, $ds_images, $ds_images_tags, $param_snapshot_tag_list
end

script "js_filter_ds_images", type: "javascript" do
  parameters "ds_images", "ds_images_tags", "param_images_tag_list"
  result "filtered_snapshots"
  code <<-EOS
// This is the list of filtered ds_images.
var filtered_snapshots = [];
// This is the map of instance href to its tags.
var tags = {};
for (var i = 0; i < ds_images_tags.length; i++) {
  vt = ds_images_tags[i]
  for (var j = 0; j < vt['links'].length; j++) {
    link = vt['links'][j]
    if (link['rel'] == 'resource') {
      tags[link['href']] = vt['tags']
    }
  }
}
// Go through all the ds_images and filter the ones that don't
// comply with the tag rules.
for (var i = 0; i < ds_images.length; i++) {
  vol = ds_images[i]
  vol_tags = []
  // Tags is an array of hashes each with just 'name'. Let's convert
  // them to an array of strings.
  for (var j = 0; j < tags[vol['href']].length; j++) {
    vol_tags.push(tags[vol['href']][j]['name'])
  }
  // Determines whether this resource is properly tagged
  var good = true;
  if (_.intersection(param_images_tag_list, vol_tags).length != param_images_tag_list.length) {
    good = false
  }
  if (good) {
    filtered_snapshots.push(
      {
        resource_uid: vol['resource_uid'],
        name: vol['name'],
        href: vol['href'],
        tags: vol_tags,
        description: vol['description'],
        root_device_storage: vol['root_device_storage']
      }
    )
  }
};
  EOS
end

escalation "alert" do
  email $param_escalate_to
end
resolution "resolution" do
  email $param_escalate_to
end

policy "pol_snapshots" do
  validate_each $ds_images do
    summary_template "Snapshots that can be deleted - GT"
    detail_template <<-EOS
# Snapshots that can be deleted

| Resource UID | Name | Href | Tags | Description | Root Device Storage |
| ------------ | ---- | ---- | ---- | ----------- | ------------------- |
{{ range data -}}
| {{ .resource_uid }} | {{ .name }} | {{.href}} | {{.tags}} | {{.description}} | {{.root_device_storage}} |
{{ end -}}
EOS

    escalate $alert
    # check gt(dec(to_d(val(item, "updated_at")), now), prod($param_age_days, 24*3600))
    check gt(0,0)
    resolve $resolution
  end
end
